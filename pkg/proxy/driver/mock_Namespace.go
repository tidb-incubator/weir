// Code generated by mockery v2.3.0. DO NOT EDIT.

package driver

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockNamespace is an autogenerated mock type for the Namespace type
type MockNamespace struct {
	mock.Mock
}

// GetPooledConn provides a mock function with given fields: _a0
func (_m *MockNamespace) GetPooledConn(_a0 context.Context) (PooledBackendConn, error) {
	ret := _m.Called(_a0)

	var r0 PooledBackendConn
	if rf, ok := ret.Get(0).(func(context.Context) PooledBackendConn); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(PooledBackendConn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsDatabaseAllowed provides a mock function with given fields: db
func (_m *MockNamespace) IsDatabaseAllowed(db string) bool {
	ret := _m.Called(db)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(db)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ListDatabases provides a mock function with given fields:
func (_m *MockNamespace) ListDatabases() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *MockNamespace) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
