// Code generated by mockery v2.3.0. DO NOT EDIT.

package driver

import (
	mysql "github.com/siddontang/go-mysql/mysql"
	mock "github.com/stretchr/testify/mock"
)

// MockSimpleBackendConn is an autogenerated mock type for the SimpleBackendConn type
type MockSimpleBackendConn struct {
	mock.Mock
}

// Begin provides a mock function with given fields:
func (_m *MockSimpleBackendConn) Begin() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *MockSimpleBackendConn) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Commit provides a mock function with given fields:
func (_m *MockSimpleBackendConn) Commit() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Execute provides a mock function with given fields: command, args
func (_m *MockSimpleBackendConn) Execute(command string, args ...interface{}) (*mysql.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, command)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 *mysql.Result
	if rf, ok := ret.Get(0).(func(string, ...interface{}) *mysql.Result); ok {
		r0 = rf(command, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mysql.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(command, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FieldList provides a mock function with given fields: table, wildcard
func (_m *MockSimpleBackendConn) FieldList(table string, wildcard string) ([]*mysql.Field, error) {
	ret := _m.Called(table, wildcard)

	var r0 []*mysql.Field
	if rf, ok := ret.Get(0).(func(string, string) []*mysql.Field); ok {
		r0 = rf(table, wildcard)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*mysql.Field)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(table, wildcard)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCharset provides a mock function with given fields:
func (_m *MockSimpleBackendConn) GetCharset() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetConnectionID provides a mock function with given fields:
func (_m *MockSimpleBackendConn) GetConnectionID() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// GetDB provides a mock function with given fields:
func (_m *MockSimpleBackendConn) GetDB() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetStatus provides a mock function with given fields:
func (_m *MockSimpleBackendConn) GetStatus() uint16 {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// IsAutoCommit provides a mock function with given fields:
func (_m *MockSimpleBackendConn) IsAutoCommit() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsInTransaction provides a mock function with given fields:
func (_m *MockSimpleBackendConn) IsInTransaction() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Ping provides a mock function with given fields:
func (_m *MockSimpleBackendConn) Ping() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Rollback provides a mock function with given fields:
func (_m *MockSimpleBackendConn) Rollback() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAutoCommit provides a mock function with given fields: _a0
func (_m *MockSimpleBackendConn) SetAutoCommit(_a0 bool) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetCharset provides a mock function with given fields: charset
func (_m *MockSimpleBackendConn) SetCharset(charset string) error {
	ret := _m.Called(charset)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(charset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StmtClosePrepare provides a mock function with given fields: stmtId
func (_m *MockSimpleBackendConn) StmtClosePrepare(stmtId int) error {
	ret := _m.Called(stmtId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(stmtId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StmtExecuteForward provides a mock function with given fields: data
func (_m *MockSimpleBackendConn) StmtExecuteForward(data []byte) (*mysql.Result, error) {
	ret := _m.Called(data)

	var r0 *mysql.Result
	if rf, ok := ret.Get(0).(func([]byte) *mysql.Result); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mysql.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StmtPrepare provides a mock function with given fields: sql
func (_m *MockSimpleBackendConn) StmtPrepare(sql string) (Stmt, error) {
	ret := _m.Called(sql)

	var r0 Stmt
	if rf, ok := ret.Get(0).(func(string) Stmt); ok {
		r0 = rf(sql)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Stmt)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sql)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseDB provides a mock function with given fields: dbName
func (_m *MockSimpleBackendConn) UseDB(dbName string) error {
	ret := _m.Called(dbName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(dbName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
